{"version":3,"sources":["redux/actions.js","redux/types.js","components/Alert.js","components/PostForm.js","components/Post.js","components/Posts.js","components/Loader.js","components/FetchedPosts.js","App.js","serviceWorker.js","redux/postReducer.js","redux/appReducer.js","redux/rootReducer.js","redux/middleware.js","redux/sagas.js","index.js"],"names":["showAlert","text","dispatch","type","payload","setTimeout","Alert","className","role","PostForm","props","submitHandler","event","preventDefault","title","state","trim","newPost","id","Date","now","toString","createPost","setState","changeInputHandler","persist","prev","target","name","value","onSubmit","this","alert","htmlFor","onChange","React","Component","mapDispatchToProps","post","connect","app","syncPosts","posts","length","map","Post","key","Loader","useDispatch","useSelector","fetchedPosts","loading","onClick","App","FetchedPosts","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","concat","forbidden","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","next","filter","w","includes","__REDUX_DEVTOOLS_EXTENSION__","run","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2bf67923.chunk.js","sourcesContent":["import { CREATE_POST, SHOW_LOADER, HIDE_LOADER, HIDE_ALERT, SHOW_ALERT, REQUEST_POSTS } from \"./types\";\r\n\r\n\r\nexport function createPost(post) {\r\n    return {\r\n        type: CREATE_POST,\r\n        payload: post\r\n    }\r\n}\r\n\r\nexport function showLoader() {\r\n    return {\r\n        type: SHOW_LOADER\r\n    }\r\n}\r\n\r\nexport function hideLoader() {\r\n    return {\r\n        type: HIDE_LOADER\r\n    }\r\n}\r\n\r\nexport function showAlert(text) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: text\r\n        \r\n        })\r\n        \r\n        setTimeout(() => {\r\n            dispatch(hideAlert())\r\n        }, 3000)\r\n    }\r\n    \r\n}\r\n\r\nexport function hideAlert() {\r\n    return {\r\n        type: HIDE_ALERT\r\n    }\r\n}\r\n\r\nexport function fetchPosts() {\r\n    return {\r\n        type: REQUEST_POSTS\r\n    }\r\n    // return async dispatch => {\r\n    //     try{\r\n    //         dispatch(showLoader())\r\n    //         const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5')\r\n    //         const json = await response.json()\r\n    //         dispatch({type: FETCH_POSTS, payload: json})\r\n    //         dispatch(hideLoader())\r\n    //     } catch(e){\r\n    //         dispatch(showAlert('Что-то пошло не так'))\r\n    //         dispatch(hideLoader())\r\n    //     }\r\n    // }\r\n}\r\n","export const CREATE_POST = 'POST/CREATE_POST'\r\nexport const FETCH_POSTS = 'POST/FETCH_POSTS'\r\nexport const REQUEST_POSTS = 'POST/REQUEST_POSTS'\r\nexport const SHOW_LOADER = 'POST/SHOW_LOADER'\r\nexport const HIDE_LOADER = 'POST/HIDE_LOADER'\r\nexport const SHOW_ALERT = 'POST/SHOW_ALERT'\r\nexport const HIDE_ALERT = 'POST/HIDE_ALERT'","import React from 'react'\r\n\r\nexport const Alert = ({text}) => (\r\n    <div className=\"alert alert-primary\" role=\"alert\">\r\n        {text}\r\n    </div>\r\n)","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {createPost, showAlert} from '../redux/actions'\r\nimport { Alert } from './Alert';\r\n\r\nclass PostForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        const {title} = this.state\r\n        if (!title.trim()) {\r\n            return this.props.showAlert('Название не может быть пустым')\r\n        }\r\n        const newPost = {\r\n            title, id: Date.now().toString()\r\n        }\r\n        this.props.createPost(newPost)\r\n        this.setState({title: ''})\r\n    }\r\n\r\n    changeInputHandler = event => {\r\n        event.persist()\r\n        this.setState(prev => ({...prev, ...{\r\n            [event.target.name]: event.target.value\r\n        }}))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitHandler}>\r\n                {this.props.alert && <Alert text={this.props.alert} />}\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"title\">Заголовок поста</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        id=\"title\"\r\n                        value={this.state.title}\r\n                        name=\"title\"\r\n                        onChange={this.changeInputHandler}\r\n                    />\r\n                </div>\r\n                <button className=\"btn btn-success\" type='submit'>Создать</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost, showAlert\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    alert: state.app.alert\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);","import React from 'react'\r\n\r\nexport default ({post}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">\r\n                    {post.title}\r\n                </h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Post from './Post'\r\n\r\nconst Posts = ({syncPosts}) => {\r\n    if(!syncPosts.length) {\r\n        return <p className=\"text-center\">Постов нет</p>\r\n    }\r\n    return syncPosts.map(post => <Post post={post} key={post.id}/>)\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts.posts\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Posts);","import React from 'react'\r\n\r\nexport const Loader = () => (\r\n    <div \r\n        className=\"spinner-border text-primary\" \r\n        role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n)","import React from 'react'\r\n\r\nimport Post from './Post'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {fetchPosts} from '../redux/actions'\r\nimport { Loader } from './Loader'\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch()\r\n    const posts = useSelector(state => state.posts.fetchedPosts)\r\n    const loading = useSelector(state => state.app.loading)\r\n\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n\r\n    if(!posts.length) {\r\n        return <button className=\"btn btn-primary\" onClick={() => dispatch(fetchPosts())}>Загрузить</button>\r\n    }\r\n\r\n    return posts.map(post => <Post post={post} key={post.id}/>)\r\n}\r\n\r\n","import React from 'react';\r\nimport PostForm from './components/PostForm';\r\nimport Posts from './components/Posts';\r\nimport FetchedPosts from './components/FetchedPosts';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container pt-3\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <PostForm/>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <h2>Синхронные посты</h2>\r\n          <Posts/>\r\n        </div>\r\n        <div className=\"col\">\r\n          <h2>Асинхронные посты</h2>\r\n          <FetchedPosts/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { CREATE_POST, FETCH_POSTS } from \"./types\"\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    fetchedPosts: []\r\n}\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case CREATE_POST:\r\n            return {...state, posts: state.posts.concat([action.payload])}\r\n        case FETCH_POSTS: \r\n            return {...state, fetchedPosts: action.payload}\r\n        default: return state\r\n    }\r\n}","import { SHOW_LOADER, HIDE_LOADER, SHOW_ALERT, HIDE_ALERT } from \"./types\"\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    alert: null\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SHOW_LOADER:\r\n            return{...state, loading: true}\r\n        case HIDE_LOADER:\r\n            return{...state, loading: false}\r\n        case SHOW_ALERT:\r\n            return{...state, alert: action.payload}\r\n        case HIDE_ALERT: \r\n            return{...state, alert: null}\r\n        default: return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { postsReducer } from \"./postReducer\";\r\nimport { appReducer } from \"./appReducer\";\r\n\r\nexport const rootReducer =  combineReducers({\r\n   posts: postsReducer,\r\n   app: appReducer\r\n})","import { CREATE_POST } from \"./types\"\r\nimport { showAlert } from \"./actions\"\r\n\r\nconst forbidden = ['fuck']\r\n\r\nexport function forbiddenWordsMiddleware({dispatch}) {\r\n    return function(next) {\r\n        return function(action) {\r\n            if(action.type === CREATE_POST) {\r\n                const found = forbidden.filter(w => action.payload.title.includes(w))\r\n                if (found.length) {\r\n                    return dispatch(showAlert('Спам'))\r\n                }\r\n            }\r\n            return next(action)\r\n        }\r\n    }\r\n}","import {takeEvery, put, call} from 'redux-saga/effects'\r\n\r\nimport { REQUEST_POSTS, FETCH_POSTS } from \"./types\";\r\nimport { showLoader, hideLoader, showAlert } from './actions';\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(REQUEST_POSTS, sagaWorker)\r\n}\r\n\r\nfunction* sagaWorker() {\r\n    try {\r\n        yield put(showLoader())\r\n        const payload = yield call(fetchPosts)\r\n        yield put({type: FETCH_POSTS, payload})\r\n        yield put(hideLoader())\r\n    } catch (e) {\r\n        yield put(showAlert('Что-то пошло не так'))\r\n        yield put(hideLoader())\r\n    }\r\n}\r\n\r\nasync function fetchPosts() {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5')\r\n    return await response.json()\r\n}","import React from 'react';\r\nimport {render} from 'react-dom';\r\nimport App from './App';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux'\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { rootReducer } from './redux/rootReducer';\r\nimport thunk from 'redux-thunk'\r\nimport { forbiddenWordsMiddleware } from './redux/middleware';\r\nimport {sagaWatcher} from './redux/sagas'\r\n\r\n\r\nconst saga = createSagaMiddleware()\r\n\r\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk, forbiddenWordsMiddleware, saga), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\r\n\r\nsaga.run(sagaWatcher)\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>\r\n)\r\n\r\nrender(\r\n  app,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}